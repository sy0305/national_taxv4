<?xml version="1.0" encoding="UTF-8"?>
<beans  
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<!-- web.xml中shiro的filter对应的bean -->
       <!-- Shiro 的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		 <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		 <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 这个是映射地址-->
		<property name="loginUrl" value="/login" />
		<!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<!--  <property name="successUrl" value="/index.jsp" />  -->
		
    	  <!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
    	 <!-- 如果您请求的资源不再您的权限范围，则跳转到/login请求地址 -->
		<property name="unauthorizedUrl" value="national_tax/content/refuse.jsp" />
		 <!-- 自定义filter配置 -->
 	<!-- 	<property name="filters">
			<map>
			  将自定义 的FormAuthenticationFilter注入shiroFilter中
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>  -->

 <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
 <!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->

		<property name="filterChainDefinitions">
			<value>
				
		<!-- 		不用我们去实现退出，只要去访问一个退出的url（该 url是可以不存在），由LogoutFilter拦截住，清除session -->
		
	
			
	
	
				<!-- 		静态资源设置匿名访问 -->
			
			 /**/*.txt=anon
				/**/*.json=anon
				/**/*.js=anon
				/**/*.css=anon
				/**/*.png=anon
				/**/*.PNG=anon
				/**/*.ico=anon
				/**/*.jpg=anon
				/**/*.jpeg=anon
				/**/*.eot=anon
				/**/*.svg=anon
				/**/*.ttf=anon
				/**/*.woff=anon
				/**/*.woff2=anon
				/logout.action=logout	 		 			
		<!-- 所有的登入都拦截 -->
		/**=authc
			
		
				<!-- /**=authc,spec -->
				<!-- 暂时放行所有资源 -->
	 	<!-- 	 /**=anon   -->
	 		 

	
			</value>
		</property>
	</bean>
 	    	<!-- 安全管理器 -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->

<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
<!-- 链接到realm -->
	<property name="realm" ref="myRealm" /> 
</bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的MyRealm.java -->
	<!-- 配置 Realm. 实际进行认证和授权的对象 通过 init-method 初始化 credentialsMatcher 属性  上面安全管理器的ref与realm id对应上 -->
	<bean id="myRealm" class="com.camel.realm.MyRealm">
	<!-- 自定义密码比对器 -->
	<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" />
    <!-- 	<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />  -->
	</bean>
	
	<!-- 凭证匹配器  如果不自定义凭证器class="org.apache.shiro.authc.credential.HashedCredentialsMatcher -->
<bean id="credentialsMatcher"
    class="com.camel.realm.credentialsMatcher">
    	<!-- 添加文件配置路径  cacheManager 设置输入密码不能超过5次  -->
<!--    <constructor-arg ref="cacheManager" />  -->
<!-- 加密方式 -->
    <property name="hashAlgorithmName" value="md5" />
    <!-- 加密次数 -->
    <!-- 定义密码加密算法及迭代次数 -->
    <property name="hashIterations" value="2" /><!--2次md5迭代-->
    <!-- 存储散列后的密码是否为16进制 -->
    <property name="storedCredentialsHexEncoded" value="true" />
</bean>
	<!-- 自定义密码比对器 -->
	<!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列 -->
	<!-- 	<property name="credentialsMatcher" ref="credentialsMatcher" /> -->
<!-- 		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />  -->
	</bean>
	
		<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->

<!-- 	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean> -->
</beans>
